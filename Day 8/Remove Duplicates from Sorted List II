Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. 
Return the linked list sorted as well.
Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

//code
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        
        ListNode *temp = new ListNode(0, head);
        ListNode *prev = temp; //this node required whenever have to delete a node , break node or create any links.

        while(head != NULL){ //traverse the list
            if(head->next != NULL && head->val == head->next->val){  //check the two adjacent nodes are equal or not before that we have to check ki node ka next null to nahi hai

                while(head->next != NULL && head->val == head->next->val)  //jab tak identical hai tab tak sirf head ko move karate raho
                    head = head->next; 

                    //jaise hi loop se bahara aayega 
                    prev->next = head->next;
            }
            else{
                prev = prev->next;
            }

            head = head->next;

            }

            return temp->next;
        }
};
