Given an integer array nums, return the length of the longest strictly increasing 
subsequence
Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

//code

class Solution {
public:
    int n;
    int dp[2501][2501]; //taking dp array of 2 dimension
    int solve(vector<int>& nums, int i, int P){

        if(i >= n) {
            return 0;
        }
        //INDEX CANNOT BE NEGATIVE
        if(P != -1 && dp[i][P] != -1){ // already we store in array
            return dp[i][P];
        }
        int take = 0;
        if(P == -1 || nums[i] > nums[P]) {
            take = 1 + solve(nums, i+1, i);
        }

        int skip = solve(nums, i+1, P);

        //If we are not store before 
        //solve then store
        //and index can not be nagative
        if(P != -1)
            dp[i][P] = max(take, skip);
        
        return max(take, skip);
    }
    int lengthOfLIS(vector<int>& nums) {
        n = nums.size();

        memset(dp, -1, sizeof(dp)); // sortcut to fill the t  array by initialising -1 in each index

        return solve(nums, 0, -1);
        
    }
};
