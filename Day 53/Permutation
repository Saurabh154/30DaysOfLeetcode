Approach I
class Solution {
private:
    void recurPermute(vector<int>& nums, vector<vector<int>> &ans, vector<int> ds, int freq[]){

        //base case
        if(ds.size() == nums.size()){
            ans.push_back(ds);
            return;
        }

        for(int i=0; i<nums.size(); i++){
            if(!freq[i]){
                ds.push_back(nums[i]); 
                freq[i] = 1; //mark
                recurPermute(nums, ans, ds, freq);
                freq[i] = 0; //unmark while returning
                ds.pop_back();
            }
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        int freq[nums.size()];
        for(int i=0; i<nums.size(); i++){
            freq[i] = 0;
        }
        recurPermute(nums, ans, ds, freq);
        return ans;
    }
};

Approach 2
class Solution {
private:
    void recurPermute(vector<int> nums, vector<vector<int>> &ans, int index){
        //base case
        if(index == nums.size()){
            ans.push_back(nums);
            return;
        }

        for(int i=index; i<nums.size(); i++){
            swap(nums[index], nums[i]);
            recurPermute(nums, ans,index+1);
            swap(nums[index], nums[i]); // while returing bring it in original position
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int index = 0;
        recurPermute(nums, ans, index);
        return ans;
    }
};
