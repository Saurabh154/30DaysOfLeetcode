/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        
        if(!head || !head->next) return head; // Empty Linked List and Single Node wali Linked List wale cases...
        ListNode* dummyNode = new ListNode(0); // dummy Linked List...
        dummyNode->next = head;
        ListNode* prev = dummyNode;
        //Traversal...
        for(int i = 1; i < left; ++i){
            prev = prev->next;
        }
        ListNode* curr = prev->next;
        //Traversal in the range left to right...
        for(int i = 1; i <= right - left; ++i){
            ListNode* temp = prev->next; // store it for further linking...
            prev->next = curr->next;
            curr->next = curr->next->next;
            prev->next->next = temp; // use temp...
        }
        return dummyNode->next;
    }
};
