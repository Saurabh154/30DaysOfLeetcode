Given an integer array nums, find the subarray
 with the largest sum, and return its sum.
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

#Naive Approach - O(n^2)
int maxSubArray(vector<int>& nums) {
        int n = size(nums), ans = INT_MIN;
        for(int i = 0; i < n; i++) 
            for(int j = i, curSum = 0; j < n ; j++) 
                curSum += nums[j],
                ans = max(ans, curSum);        
        return ans;
    }


#By Using Kadane's Algorithm - O(n)

int maxSubArray(vector<int>& nums) {
        int maxSum=nums[0];
        int sum=0;

        for(int i=0; i<nums.size(); i++){
            if(sum >= 0){
                sum = sum + nums[i];
            }
            else{
                sum = nums[i];
            }           
            if(sum > maxSum){
                maxSum = sum;
            }             
        }

        return maxSum;
    }
