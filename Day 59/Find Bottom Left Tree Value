Approach-I Using DFS
class Solution {
public:
    int maxDepth;
    int bottomLeft; //result

    void dfs(TreeNode* root, int currDepth){
        if(!root)
            return;
        
        if(currDepth > maxDepth){
            maxDepth = currDepth;
            bottomLeft = root->val;
        }

        dfs(root->left, currDepth+1);
        dfs(root->right, currDepth+1);
    }
    int findBottomLeftValue(TreeNode* root) {
        maxDepth = -1;
        dfs(root, 0);
        return bottomLeft;
    }
};

Approach-II Using BFS
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>que;

        int bottomLeft;
        que.push(root);

        while(!que.empty()){
            TreeNode* node = que.front();
            que.pop();

            bottomLeft = node->val;
            if(node->right)
                que.push(node->right);
            if(node->left)
                que.push(node->left);
        }
        return bottomLeft;
    }
};

Approach-III Using BFS level processing
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> que;

        int bottomLeft;
        que.push(root);

        while (!que.empty()) {

            int n = que.size(); // current level has n nodes
            while (n--) { //process all those n nodes at once
                TreeNode* node = que.front();
                que.pop();

                bottomLeft = node->val;
                if (node->right)
                    que.push(node->right);
                if (node->left)
                    que.push(node->left);
            }
        }
        return bottomLeft;
    }
};
