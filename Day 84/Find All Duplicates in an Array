Approach 1 : By Using Hashmap
=============================
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;
        unordered_map<int, int> mp;
        
        for(auto it : nums){
            mp[it]++;
        }

        for(auto i : mp){
            if(i.second == 2){
                ans.push_back(i.first); 
            }
        }
        return ans;
    }
};

Approach 2 : Optimised Approach
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;

        for(int i=0; i<nums.size(); i++){

            int num = abs(nums[i]);

            int idx = num-1;

            if(nums[idx] < 0){
                ans.push_back(num);
            } else{
                nums[idx] *= -1;
            }
        }
        return ans;
    }
};
